--- % -------------------------------------------------------------------------------------------
--- % The GNETS-SEMANTICS module 
--- % -------------------------------------------------------------------------------------------

mod GNETS-SEMANTICS is
 pr GNETS-ACTION-SEMANTICS .

 vars p p'     : PlaceName      .   var meth       : MethodList    .
 vars g g'     : GNetName       .   vars tlC plC C : Configuration .
 var t         : TransitionName .   vars al al'    : ArcList       .
 var act       : Action         .   var cond       : BExp          .
 var xl        :   VarList      .   var arc        : Arc           .
 vars m m'     : Marking        .   var mt         : MethodName    .
 vars ms ms'   : MsgSet         .   var to         : Token         .
 var seq       : SeqList        .   vars pl pl'    : PlaceList     .  
 vars isp isp' : ISP            .   var np         : NP            .   
 var gp        : GP             .

 --- Returns the list of GNet transitions (From a GSP)
 op Trans`(_`) : GSP -> Configuration .
 eq Trans ( {[meth] < g : GNet | places:   plC ,
                            transitions:   tlC  >}
          )   =  tlC .

 --- Transform the liste of transitions into new form 
 op Transform`(_`) : Configuration -> TransitionList .    --- 
 eq Transform(< t | input: al , output: al' , action: act > ) = 
                                                    Place(al) 
                                                             --> [t] --> 
                                                    Place(al') 
                                                              if Condition(al) 
                                                              action: act     .
 eq Transform(< t | input: al , output: al' , action: act > tlC ) =  
                                                (   Place(al) 
                                                            --> [t] --> 
                                                    Place(al') 
                                                              if Condition(al)
                                                              action: act         ), 
                                                    Transform (tlC) [owise]             .
 --- Returns a list of places 
 op Place`(_`) : ArcList -> PlaceList .
 eq Place(p if cond)                = p .
 eq Place(p if cond ins: xl) = p .
 eq Place(p ins: xl)              = p . 
 eq Place(arc ; al)                    = Place(arc) , Place (al) [owise] .

 --- Returns a condition 
 op Condition`(_`) : ArcList -> BExp .
 eq Condition(p if cond)                = cond .
 eq Condition(p if cond ins: xl) = cond .
 eq Condition(p ins: xl)              = true .
 eq Condition(arc ; al)                    = (Condition(arc)) And (Condition (al)) [owise] .

 --- Return a list of marking places
 op MarkingPlaces`(_`) : Marking ->  PlaceList .
 eq MarkingPlaces(< p , to >) = p .
 eq MarkingPlaces(m m') = MarkingPlaces(m) , MarkingPlaces(m') [owise] .

 --- Check whether the SColor for all tokens in a marking's places is in the "After" state.
 op After`(_`) : Marking -> Bool .
 eq After (< p , token (seq, after  ,ms) >)           = true .
 eq After (< p , token (seq, before ,ms) > m) = false .
 eq After (< p , token (seq, after  ,ms) > m) = After (m) [owise] .

 --- 
 op Act `(_,_`) :  GSP PlaceName -> Action .
 eq Act({[meth] < g : GNet | places: < p | action: act > plC , 
                                                 transitions: tlC >} , p ) 
                           = act .
 eq Act({[meth] < g : GNet | places: < isp(g' , mt) | action: act > plC , 
                                                 transitions: tlC >} , isp ) 
                           = act .

 --- 
 op OutPutArcs`(_,_`) : TransitionName GSP -> ArcList .
 eq OutPutArcs ( t , {[meth] < g : GNet | places:   plC ,
                                          transitions: < t | input: al , 
                                                                            output: al' ,
                                                                            action: act > tlC  >} )
                           =  al' .

 --- 
 op NewMarking`(_,_,_`) : ArcList Marking Action ->  Marking .
 op NewMarking`(_,_`) : PlaceList Token ->  Marking .
 eq NewMarking(p if cond  , (m < p' , token (seq, after ,ms) >) , act ) 
              = < p, token ( seq, before,em) > .
 eq NewMarking(p if cond ins: xl , (m < p' , token (seq, after ,ms) >) , act ) 
              = < p, token ( seq, before, xl{< act , ms ; MsgMarking(m) >}) > .
 eq NewMarking(p ins: xl    , (m < p' , token (seq, after ,ms) >) , act ) 
              = < p, token ( seq, before, xl{< act , ms ; MsgMarking(m) >}) > . 
 eq NewMarking((arc ; al) , m , act )  
              = NewMarking(arc, m , act ) NewMarking (al,m , act) [owise] .
 eq NewMarking(p , to)          
              = < p, to > .
 eq NewMarking((p , pl) , to )  
              = < p, to > NewMarking (pl , to) [owise] . 

 --- Comment
  op Invoked(_,_) : ISP GSP -> ResultInvoked .
  eq Invoked (isp , {[meth] < g : GNet | 
                         places:  < isp ( g' , mt ) | action: act > plC ,
                         transitions: tlC  >} ) 
              = (g' , mt) .

  op method`(_,_`) : MethodName GSP -> Method .
  eq method(mt , {[ ( mt : {[xl] (pl) (pl')} ) ; (meth)] C } ) 
              = mt :{[ xl](pl)(pl')} .
 
 --- 
 op MsgMarking`(_`) : Marking ->  MsgSet .
 eq MsgMarking (empty) = em .
 eq MsgMarking(< p , token (seq, after ,ms) >) = ms .
 eq MsgMarking(m m') = MsgMarking(m) ; MsgMarking(m') [owise] .
 
 --- 
 op Compare-Seq`(_,_`) : SeqList Marking -> Bool .
 eq Compare-Seq (seq , < p , token (seq, sc:SColor  ,ms) >)           = true .
 eq Compare-Seq (seq , < p , token (seq, sc:SColor  ,ms) > m) = Compare-Seq (seq , m) .
 eq Compare-Seq (seq , m)                                                              = false [owise] .

 --- 
 op Right-hand`(_,_,_`) : GNetName Marking TransitionList -> ResultCheck .
 crl [right-hand-rule] :  Right-hand(g , m , (lt:TransitionList , (pl --> [t]
                                                              --> pl' if cond action: act ) )) 
                        =>  (al , act)
                        if  MarkingPlaces(m)                        => pl
                        /\  OutPutArcs(t , Gsp(g))  => al
                        /\  < cond , MsgMarking (m) >          => true . 

 crl [trans-r1] : g | m < np , token (seq, after ,ms) > m' 
             =>   g | NewMarking(al , (m < np , token (seq, after ,ms) >) , act ) m' 
             if   After(m < np , token (seq, after ,ms) >)
             /\   Right-hand( g, m < np , token (seq, after ,ms) > , Transform(Trans(Gsp(g)))) 
                  => (al , act) 
             /\   Compare-Seq (seq , m < np , token (seq, after ,ms) > ) . 

 crl [trans-r2] : g | m < isp , token (seq, after ,ms) > m' 
             =>   g | NewMarking(al , (m < isp , token (seq, after ,ms) >) , act ) m' 
             if   After(m < isp , token (seq, after ,ms) >)
             /\   Right-hand( g, m < isp , token (seq, after ,ms) > , Transform(Trans(Gsp(g))))
                  => (al , act) 
             /\ Compare-Seq (seq , m < isp , token (seq, after ,ms) > ) . 

 crl [after-r1] : g | m < np , token (seq, before ,ms ) >  
             =>   g | m < np , token (seq, after  ,ms') > 
             if   < Act(Gsp(g), np ), ms > => ms' . 

 crl [after-r2] : g | m < gp , token (seq, before ,ms) >  
             =>   g | m < gp , token (seq, after ,ms') > 
             if   < Act(Gsp(g),gp), ms > => ms' . 

 crl [isp-rule] : g | m < isp , token (seq, before ,ms) >  
             =>  (g | m) (g' | NewMarking ( pl , 
                  token ( (g , isp) seq, before , (xl){ms}))) 
             if   Invoked(isp , Gsp(g) ) => (g' , mt) 
             /\   method(mt , Gsp(g')) => mt :{[xl](pl)(pl')} .

 rl [retun-isp] : g | m < gp , token ( (g' , isp') seq , after , ms) >  
             =>  (g | m) ( g' | < isp' , token (seq , after , ms)      > ) .
 
 rl [empty-rule]  :   g | empty  => none-config  .
 rl [fusion-rule] : ( g | m ) ( g | m' )  => ( g | m m' ) .

endm 
